# app.py - Main Streamlit application entry point
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import sys
import os

# Add src to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.utils.config import get_config
from src.utils.logger import get_logger
from src.app.predictor import StockPredictor

# Page config
st.set_page_config(
    page_title="Vietnamese Banking Stock Predictor",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Initialize
@st.cache_resource
def init_app():
    """Initialize application components"""
    try:
        config = get_config()
        predictor = StockPredictor()
        return config, predictor
    except Exception as e:
        st.error(f"Failed to initialize application: {e}")
        return None, None

def main():
    """Main Streamlit application"""
    
    config, predictor = init_app()
    if config is None or predictor is None:
        st.stop()
    
    st.title("üè¶ Vietnamese Banking Stock Predictor")
    st.markdown("""
    D·ª± ƒëo√°n xu h∆∞·ªõng c·ªï phi·∫øu ng√†nh ng√¢n h√†ng Vi·ªát Nam b·∫±ng c√°c m√¥ h√¨nh h·ªçc s√¢u.
    Ch·ªçn m·ªôt ng√¢n h√†ng, m√¥ h√¨nh v√† chu k·ª≥ d·ª± b√°o ƒë·ªÉ nh·∫≠n k·∫øt qu·∫£.
    """)
    
    st.sidebar.header("C√†i ƒë·∫∑t D·ª± b√°o")
    
    tickers = config.get('data.tickers', [])
    ticker = st.sidebar.selectbox("Ch·ªçn Ng√¢n h√†ng", tickers)
    
    available_models = predictor.get_available_models(ticker)
    if not available_models:
        st.error(f"Kh√¥ng t√¨m th·∫•y model ƒë√£ hu·∫•n luy·ªán cho m√£ {ticker}. Vui l√≤ng hu·∫•n luy·ªán tr∆∞·ªõc.")
        st.code(f"python main.py train --models all --tickers {ticker}")
        st.stop()
    
    model_type = st.sidebar.selectbox("Ch·ªçn Model", available_models)
    horizons = config.get('models.shared.forecast_horizons', [1, 3, 5])
    horizon = st.sidebar.selectbox("Chu k·ª≥ D·ª± b√°o (ng√†y)", horizons)
    
    if st.sidebar.button("Th·ª±c hi·ªán D·ª± b√°o", type="primary"):
        with st.spinner("ƒêang th·ª±c hi·ªán d·ª± b√°o..."):
            prediction = predictor.predict(ticker, model_type, horizon)
        
        if prediction is None:
            st.error("Th·ª±c hi·ªán d·ª± b√°o th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra logs ƒë·ªÉ bi·∫øt chi ti·∫øt.")
            st.stop()

        st.header("üìä K·∫øt qu·∫£ D·ª± b√°o")
        st.session_state['prediction'] = prediction

    # Display prediction results if they exist in session state
    if 'prediction' in st.session_state:
        prediction = st.session_state['prediction']
        
        # Check if the prediction is for the currently selected options
        if prediction.get('ticker') == ticker and prediction.get('model_type') == model_type and prediction.get('horizon') == horizon:
            col1, col2, col3 = st.columns(3)
            with col1:
                direction = prediction.get('predicted_direction', 'N/A')
                confidence = prediction.get('direction_confidence', 0)
                direction_emoji = {'Up': 'üîº', 'Down': 'üîΩ'}.get(direction, '‚ÜîÔ∏è')
                st.metric("Xu h∆∞·ªõng D·ª± b√°o", f"{direction} {direction_emoji}", help=f"ƒê·ªô tin c·∫≠y: {confidence:.2%}")

            with col2:
                predicted_price = prediction.get('predicted_price')
                if predicted_price is not None:
                    metric_delta = None
                    metric_help = f"Gi√° d·ª± b√°o cho {horizon} ng√†y t·ªõi"
                    if 'current_price' in prediction and 'price_change_pct' in prediction:
                        price_change_pct = prediction['price_change_pct']
                        metric_delta = f"{price_change_pct:+.2%}"
                        metric_help = f"Hi·ªán t·∫°i: {prediction['current_price']:,.0f} VND ‚Üí D·ª± b√°o: {predicted_price:,.0f} VND"
                    
                    st.metric("Gi√° D·ª± b√°o", f"{predicted_price:,.0f} VND", delta=metric_delta, help=metric_help)
            
            with col3:
                st.metric("Model s·ª≠ d·ª•ng", model_type.upper(), help=f"Chu k·ª≥ d·ª± b√°o: {horizon} ng√†y")

    # Historical data visualization
    st.header("üìà Bi·ªÉu ƒë·ªì L·ªãch s·ª≠ Gi√°")
    historical_data = predictor.get_historical_data(ticker, days=90)
    if historical_data is not None and not historical_data.empty:
        fig = make_subplots(rows=2, cols=1, shared_xaxes=True, vertical_spacing=0.1, subplot_titles=(f'Bi·ªÉu ƒë·ªì gi√° {ticker}', 'Kh·ªëi l∆∞·ª£ng Giao d·ªãch'), row_heights=[0.7, 0.3])
        fig.add_trace(go.Candlestick(x=historical_data['time'], open=historical_data['Open'], high=historical_data['High'], low=historical_data['Low'], close=historical_data['Close'], name='Gi√°'), row=1, col=1)
        fig.add_trace(go.Bar(x=historical_data['time'], y=historical_data['Volume'], name='Volume', marker_color='lightblue'), row=2, col=1)
        fig.update_layout(title_text=f"{ticker} - D·ªØ li·ªáu 90 ng√†y g·∫ßn nh·∫•t", xaxis_title="Ng√†y", yaxis_title="Gi√° (VND)", height=600, showlegend=False)
        fig.update_xaxes(rangeslider_visible=False)
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ cho m√£ {ticker}")
    
    # Model information
    st.sidebar.markdown("---")
    st.sidebar.info("Th√¥ng tin v·ªÅ c√°c m√¥ h√¨nh ƒë∆∞·ª£c s·ª≠ d·ª•ng trong d·ª± √°n.")
    st.sidebar.expander("CNN-BiLSTM").write("K·∫øt h·ª£p M·∫°ng T√≠ch ch·∫≠p (CNN) ƒë·ªÉ nh·∫≠n d·∫°ng m·∫´u v√† M·∫°ng LSTM Hai chi·ªÅu (BiLSTM) ƒë·ªÉ m√¥ h√¨nh h√≥a chu·ªói th·ªùi gian. M·∫°nh trong vi·ªác nh·∫≠n d·∫°ng m·∫´u c·ª•c b·ªô v√† n·∫Øm b·∫Øt c√°c ph·ª• thu·ªôc d√†i h·∫°n.")
    st.sidebar.expander("Transformer").write("S·ª≠ d·ª•ng c∆° ch·∫ø t·ª± ch√∫ √Ω (self-attention) ƒë·ªÉ m√¥ h√¨nh h√≥a c√°c m·ªëi quan h·ªá ph·ª©c t·∫°p trong d·ªØ li·ªáu. V∆∞·ª£t tr·ªôi v·ªõi chu·ªói d·ªØ li·ªáu d√†i v√† n·∫Øm b·∫Øt c√°c m·∫´u h√¨nh ph·ª©c t·∫°p.")

if __name__ == "__main__":
    main()